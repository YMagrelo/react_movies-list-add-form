{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/TextField/TextField.js","components/NewMovie/constants.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","TextField","props","value","onChange","label","name","placeholder","error","inputClass","cx","htmlFor","id","type","required","Boolean","trim","fields","validators","initialValues","initialErrors","NewMovie","state","values","errors","handleInputChange","target","setState","prevState","handleSubmit","event","preventDefault","newErrors","validate","hasErrors","Object","some","addMovie","this","reduce","acc","fieldConfig","fieldValue","fieldError","validator","onSubmit","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6950f92d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as cx from 'classnames';\n\nexport const TextField = (props) => {\n  const {\n    value,\n    onChange,\n    label,\n    name,\n    placeholder,\n    error,\n  } = props;\n\n  const inputClass = cx('input', {\n    'is-danger': !!error,\n  });\n\n  return (\n    <div className=\"field\">\n      <label htmlFor={name} className=\"label\">\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={name}\n          name={name}\n          className={inputClass}\n          type=\"text\"\n          placeholder={placeholder}\n          value={value}\n          onChange={onChange}\n        />\n      </div>\n      {error\n        && (\n          <p className=\"help is-danger\">\n            {error}\n          </p>\n        )}\n    </div>\n  );\n};\n\nTextField.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  error: PropTypes.string,\n};\n\nTextField.defaultProps = {\n  placeholder: 'Enter text here',\n  error: '',\n};\n","export const required = (name, value) => {\n  const isValid = Boolean(value.trim());\n\n  if (isValid) {\n    return null;\n  }\n\n  return `Field ${name} is required`;\n};\n\nexport const fields = [\n  {\n    name: 'title',\n    label: 'Movie title',\n    placeholder: 'Add new movie title',\n    validators: [required],\n  },\n  {\n    name: 'description',\n    label: 'Movie description',\n    placeholder: 'Add new movie description',\n    validators: [required],\n  },\n  {\n    name: 'imgUrl',\n    label: 'Movie imgUrl',\n    placeholder: 'Add new movie imgUrl',\n    validators: [required],\n  },\n  {\n    name: 'imdbUrl',\n    label: 'Movie imdbUrl',\n    placeholder: 'Add new movie imdbUrl',\n    validators: [required],\n  },\n  {\n    name: 'imdbId',\n    label: 'Movie imdbId',\n    placeholder: 'Add new movie imdbId',\n    validators: [required],\n  },\n];\n\nexport const initialValues = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const initialErrors = {\n  title: null,\n  description: null,\n  imgUrl: null,\n  imdbUrl: null,\n  imdbId: null,\n};\n","import React, { Component } from 'react';\nimport './NewMovie.scss';\nimport PropTypes from 'prop-types';\nimport { TextField } from '../TextField/TextField';\nimport {\n  initialValues,\n  initialErrors,\n  fields,\n} from './constants';\n\nexport class NewMovie extends Component {\n  state = {\n    values: initialValues,\n    errors: initialErrors,\n  }\n\n  handleInputChange = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState(prevState => ({\n      values: {\n        ...prevState.values,\n        [name]: value,\n      },\n    }));\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const { values } = this.state;\n    const newErrors = this.validate();\n    const hasErrors = Object.values(newErrors).some(Boolean);\n\n    if (!hasErrors) {\n      this.props.addMovie({ ...values });\n    }\n\n    this.setState((prevState) => {\n      return {\n        values: hasErrors ? prevState.values : initialValues,\n        errors: newErrors,\n      };\n    });\n  }\n\n  validate() {\n    const {\n      values,\n      errors,\n    } = this.state;\n\n    const newErrors = fields\n      .reduce((acc, fieldConfig) => {\n        const { name, validators } = fieldConfig;\n\n        if (!validators) {\n          return {\n            ...acc,\n            [name]: null,\n          };\n        }\n\n        const fieldValue = values[name];\n\n        const fieldError = validators.reduce((error, validator) => {\n          if (error) {\n            return error;\n          }\n\n          return validator(name, fieldValue);\n        }, null);\n\n        return {\n          ...acc,\n          [name]: fieldError,\n        };\n      }, { ...errors });\n\n    return newErrors;\n  }\n\n  render() {\n    const {\n      values,\n      errors,\n    } = this.state;\n\n    return (\n      <form\n        className=\"form\"\n        onSubmit={this.handleSubmit}\n      >\n        <h1 className=\"form__heading\">Add your movie</h1>\n        {fields.map((fieldConfig) => {\n          const {\n            name,\n            label,\n            placeholder,\n          } = fieldConfig;\n\n          return (\n            <TextField\n              key={name}\n              name={name}\n              label={label}\n              placeholder={placeholder}\n              value={values[name]}\n              onChange={this.handleInputChange}\n              error={errors[name]}\n            />\n          );\n        })}\n\n        <button\n          type=\"submit\"\n          className=\"button is-link\"\n        >\n          Add movie\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: [...moviesFromServer],\n  };\n\n  addMovie = (movie) => {\n    this.setState(prevState => ({\n      movies: [...prevState.movies, { ...movie }],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}