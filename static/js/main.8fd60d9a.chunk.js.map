{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/TextField/TextField.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","TextField","props","value","onChange","label","name","placeholder","error","inputClass","cx","htmlFor","id","type","NewMovie","state","titleError","descriptionError","imgUrlError","imdbUrlError","imdbIdError","handleInputChange","target","setState","handleSubmit","event","preventDefault","trim","addMovie","this","onSubmit","Component","App","moviesFromServer","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8fd60d9a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as cx from 'classnames';\n\nexport const TextField = (props) => {\n  const {\n    value,\n    onChange,\n    label,\n    name,\n    placeholder,\n    error,\n  } = props;\n\n  const inputClass = cx('input', {\n    'is-danger': !!error,\n  });\n\n  return (\n    <div className=\"field\">\n      <label htmlFor={name} className=\"label\">\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={name}\n          name={name}\n          className={inputClass}\n          type=\"text\"\n          placeholder={placeholder}\n          value={value}\n          onChange={onChange}\n        />\n      </div>\n      {error\n        && (\n          <p className=\"help is-danger\">\n            {error}\n          </p>\n        )}\n    </div>\n  );\n};\n\nTextField.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  error: PropTypes.string,\n};\n\nTextField.defaultProps = {\n  placeholder: 'Enter text here',\n  error: '',\n};\n","import React, { Component } from 'react';\nimport './NewMovie.scss';\nimport PropTypes from 'prop-types';\nimport { TextField } from '../TextField/TextField';\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    titleError: '',\n    descriptionError: '',\n    imgUrlError: '',\n    imdbUrlError: '',\n    imdbIdError: '',\n  };\n\n  handleInputChange = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = this.state;\n\n    if (title.trim() === '') {\n      this.setState({\n        titleError: 'Title is required',\n      });\n\n      return;\n    }\n\n    if (description.trim() === '') {\n      this.setState({\n        descriptionError: 'Description is required',\n      });\n\n      return;\n    }\n\n    if (imgUrl.trim() === '') {\n      this.setState({\n        imgUrlError: 'imgUrl is required',\n      });\n\n      return;\n    }\n\n    if (imdbUrl.trim() === '') {\n      this.setState({\n        imdbUrlError: 'imdbUrl is required',\n      });\n\n      return;\n    }\n\n    if (imdbId.trim() === '') {\n      this.setState({\n        imdbIdError: 'imdbId is required',\n      });\n\n      return;\n    }\n\n    this.props.addMovie({\n      title, description, imgUrl, imdbUrl, imdbId,\n    });\n\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n      titleError: '',\n      descriptionError: '',\n      imgUrlError: '',\n      imdbUrlError: '',\n      imdbIdError: '',\n    });\n  }\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      titleError,\n      descriptionError,\n      imgUrlError,\n      imdbUrlError,\n      imdbIdError,\n    } = this.state;\n\n    return (\n      <form\n        className=\"form\"\n        onSubmit={this.handleSubmit}\n      >\n        <h1 className=\"form__heading\">Add your movie</h1>\n        <TextField\n          name=\"title\"\n          label=\"Movie title\"\n          placeholder=\"Add new movie title\"\n          value={title}\n          onChange={this.handleInputChange}\n          error={titleError}\n        />\n        <TextField\n          name=\"description\"\n          label=\"Movie description\"\n          placeholder=\"Add new movie description\"\n          value={description}\n          onChange={this.handleInputChange}\n          error={descriptionError}\n        />\n        <TextField\n          name=\"imgUrl\"\n          label=\"Movie imgUrl\"\n          placeholder=\"Add new movie imgUrl\"\n          value={imgUrl}\n          onChange={this.handleInputChange}\n          error={imgUrlError}\n        />\n        <TextField\n          name=\"imdbUrl\"\n          label=\"Movie imdbUrl\"\n          placeholder=\"Add new movie imdbUrl\"\n          value={imdbUrl}\n          onChange={this.handleInputChange}\n          error={imdbUrlError}\n        />\n        <TextField\n          name=\"imdbId\"\n          label=\"Movie imdbId\"\n          placeholder=\"Add new movie imdbId\"\n          value={imdbId}\n          onChange={this.handleInputChange}\n          error={imdbIdError}\n        />\n        <button\n          type=\"submit\"\n          className=\"button is-link\"\n        >\n          Add movie\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: [...moviesFromServer],\n  };\n\n  addMovie = (movie) => {\n    this.setState(prevState => ({\n      movies: [...prevState.movies, { ...movie }],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}